/**
 * В этом примере функция binarySearch принимает отсортированный массив arr и искомый элемент target.
 * Алгоритм бинарного поиска работает путем деления области поиска пополам и сравнения среднего элемента с искомым.
 * Если средний элемент равен искомому, то возвращается его индекс. Если средний элемент меньше искомого, то область
 * поиска сужается до правой половины массива. Если средний элемент больше искомого, то область поиска сужается до
 * левой половины массива. Этот процесс повторяется, пока не будет найден искомый элемент или пока область поиска
 * не сократится до пустого интервала.
 * <p>
 * В основной функции main приведен пример использования алгоритма бинарного поиска для поиска элемента target
 * в массиве arr. Если элемент найден, выводится его позиция, иначе выводится сообщение "Элемент не найден".
 */
public class BinarySearch {
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 8, 10, 12, 14, 16};
        int target = 10;

        int result = binarySearch(arr, target);

        if (result == -1) {
            System.out.println("Элемент не найден");
        } else {
            System.out.println("Элемент найден на позиции " + result);
        }
    }
}

